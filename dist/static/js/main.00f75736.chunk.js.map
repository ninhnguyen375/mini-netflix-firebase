{"version":3,"sources":["components/navigation-bar/NavigationBar.js","components/Processing.js","components/context-video/ContextVideo.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","window","cloudinary","openUploadWidget","cloudName","tags","uploadPreset","error","result","console","log","react_default","a","createElement","Navbar","bg","expand","Brand","alt","src","width","Toggle","aria-controls","Collapse","id","Nav","className","Link","onClick","this","uploadVideo","Button","Component","Processing","concat","props","hidden","ContextVideo","state","videos","isUploading","Axios","get","promiseData","data","resources","setState","getVideos","setInterval","bind","clearInterval","Container","Processing_Processing","lib","map","video","index","key","publicId","public_id","height","controls","created_at","App","NavigationBar_NavigationBar","ContextVideo_ContextVideo","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAKqBA,wLAEjBC,OAAOC,WAAWC,iBAAiB,CACjCC,UAAW,gBACXC,KAAM,CAAC,gBACPC,aAAc,YACb,SAACC,EAAOC,GAETC,QAAQC,IAAIH,EAAOC,sCAIrB,OACIG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtBL,EAAAC,EAAAC,cAACC,EAAA,EAAOG,MAAR,KACEN,EAAAC,EAAAC,cAAA,OAAKK,IAAI,UAAUC,IAAI,mBAAmBC,MAAM,SAEpDT,EAAAC,EAAAC,cAACC,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7BX,EAAAC,EAAAC,cAACC,EAAA,EAAOS,SAAR,CAAiBC,GAAG,oBAClBb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAKC,UAAU,WACbf,EAAAC,EAAAC,cAACY,EAAA,EAAIE,KAAL,CAAUD,UAAU,aAApB,cAGMf,EAAAC,EAAAC,cAACY,EAAA,EAAIE,KAAL,CAAUC,QAAUC,KAAKC,aAAzB,WAUFnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,wBAjCyBC,0ECHtBC,mLAEjB,OACEtB,EAAAC,EAAAC,cAAA,OAAMa,UAAS,qBAAAQ,OACQL,KAAKM,MAAMC,QAElCZ,GAAK,cAHL,cAIc,IACZb,EAAAC,EAAAC,cAAA,OAAKK,IAAI,cAAcC,IAAI,uBAAuBC,MAAM,OACvD,IANH,8DAHkCY,aCQnBK,6MACnBC,MAAQ,CACNC,OAAQ,GACRC,aAAa,qNAIeC,IAAMC,IAAI,mFAA9BC,SACFd,KAAKS,MAAMC,SAAWI,EAAYC,KAAKC,0BACzChB,KAAKiB,SAAS,CACZP,OAAQI,EAAYC,KAAKC,UACzBL,aAAa,qQASnBX,KAAKkB,YACLC,YAAYnB,KAAKkB,UAAUE,KAAKpB,MAAO,oDAGvCqB,cAAcrB,KAAKkB,4CAEZ,IACCR,EAAWV,KAAKS,MAAhBC,OACR,OACI5B,EAAAC,EAAAC,cAACsC,EAAA,EAAD,MAEItB,KAAKS,MAAME,YACP7B,EAAAC,EAAAC,cAACuC,EAAD,CAAYhB,OAAO,MAGzBzB,EAAAC,EAAAC,cAACwC,EAAA,kBAAD,CAAmBjD,UAAU,gBAAgBsB,UAAU,oBAEjDa,EAAOe,IAAI,SAACC,EAAOC,GAAR,OACT7C,EAAAC,EAAAC,cAAA,OAAK4C,IAAKD,EAAO9B,UAAU,YACzBf,EAAAC,EAAAC,cAACwC,EAAA,MAAD,CAAOK,SAAUH,EAAMI,UAAWvC,MAAM,MAAMwC,OAAO,MAAMC,UAAQ,IAEnElD,EAAAC,EAAAC,cAAA,wBAAiB0C,EAAMO,wBAzCD9B,aCM3B+B,mLATX,OACEpD,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAACmD,EAAD,MACArD,EAAAC,EAAAC,cAACoD,EAAD,cALUjC,aCOEkC,QACW,cAA7BjE,OAAOkE,SAASC,UAEe,UAA7BnE,OAAOkE,SAASC,UAEhBnE,OAAOkE,SAASC,SAASC,MACvB,kECZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.00f75736.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, Nav, Button } from 'react-bootstrap';\n\n\n\nexport default class NavigationBar extends Component {\n  uploadVideo(){\n    window.cloudinary.openUploadWidget({\n      cloudName: 'ninhnguyen375',\n      tags: ['mini-netflix'],\n      uploadPreset: 'xavnsizn'\n    }, (error, result) => {\n      \n      console.log(error, result)\n    });\n  }\n  render() {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand>\n              <img alt=\"nothing\" src=\"netflix-logo.png\" width=\"120\" />\n            </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link className=\"mr-3 ml-3\">All Videos</Nav.Link>\n              {\n                (true) ?\n                    <Nav.Link onClick={ this.uploadVideo }>Upload</Nav.Link>\n                  : \"\"\n              }\n            </Nav>\n            {/* <Form inline>\n              <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n              <Button variant=\"outline-success\">Search</Button>\n            </Form> */}\n            {\n              (true) \n                ? <Button>Logout</Button> \n                : <Button>Login</Button> \n            }\n          </Navbar.Collapse>\n        </Navbar>\n\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Processing extends Component {\n  render() {\n    return (\n      < div className = {\n        `alert alert-light ${this.props.hidden}`\n      }\n      id = \"Processing\" >\n        Listenning {' '}\n        <img alt=\"loading-gif\" src=\"Eclipse-1s-200px.gif\" width=\"25\" />\n        {' '} (new upload video has been display about 1 minute)\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  Container,\n} from 'react-bootstrap';\nimport {\n  CloudinaryContext,\n  Video,\n} from 'cloudinary-react';\nimport Axios from 'axios';\nimport Processing from '../Processing';\nexport default class ContextVideo extends Component {\n  state = {\n    videos: [],\n    isUploading: true,\n  }\n  async getVideos(){\n    try{ \n      const promiseData = await Axios.get('https://res.cloudinary.com/ninhnguyen375/video/list/mini-netflix.json');\n      if (this.state.videos !== promiseData.data.resources) {\n        this.setState({\n          videos: promiseData.data.resources,\n          isUploading: false,\n        });\n      } else {\n        return;\n      }\n    } catch(err){\n    }\n  }\n  componentDidMount(){\n    this.getVideos();\n    setInterval(this.getVideos.bind(this), 100);\n  }\n  componentWillUnmount(){\n    clearInterval(this.getVideos);\n  }\n  render() {\n    const { videos } = this.state;\n    return (\n        <Container>\n          {\n            this.state.isUploading \n              ? <Processing hidden=\"\" />\n              : <Processing hidden=\"\" />\n          }\n          <CloudinaryContext cloudName=\"ninhnguyen375\" className=\"d-flex flex-wrap\">\n              {\n                videos.map((video, index) => (\n                  <div key={index} className=\"col-sm-4\">\n                    <Video publicId={video.public_id} width=\"200\" height=\"200\" controls>\n                    </Video>\n                    <div>Create at { video.created_at }</div>\n                  </div>\n                ))\n              }\n          </CloudinaryContext>\n        </Container>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport NavigationBar from './components/navigation-bar/NavigationBar';\nimport ContextVideo from './components/context-video/ContextVideo';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NavigationBar />\n        <ContextVideo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}